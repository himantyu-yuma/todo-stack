name: Build and Push for Server

on:
  push:
    branches:
      - main

env:
  DOCKER_REGISTRY: docker.pkg.github.com
  DOCKER_IMAGE_PREFIX: todo-stack_

jobs:
  push_backend:
    name: Push backend docker image to GitHub Packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [web, app]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login $DOCKER_REGISTRY -u ${{ github.actor }} --password-stdin

      - name: Build image
        run: |
          IMAGE_ID=$DOCKER_REGISTRY/${{ github.repository }}/${{ env.DOCKER_IMAGE_PREFIX }}${{ matrix.image }}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

      - name: Build and push
        working-directory: ./backend/${{ matrix.image }}
        run: |
          docker buildx build \
            --platform linux/arm64 \
            --tag ${{ env.IMAGE_ID}}:latest \
            ../
          docker push $IMAGE_ID:$IMAGE_VERSION

  push_frontend:
    name: Push frontend docker image to GitHub Packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [frontend]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login $DOCKER_REGISTRY -u ${{ github.actor }} --password-stdin

      - name: Build image
        run: |
          IMAGE_ID=$DOCKER_REGISTRY/${{ github.repository }}/${{ env.DOCKER_IMAGE_PREFIX }}${{ matrix.image }}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

      - name: Build and push
        run: |
          docker buildx build \
            --platform linux/arm64 \
            --tag ${{ env.IMAGE_ID}}:latest \
            --target production \
            frontend
          docker push $IMAGE_ID:$IMAGE_VERSION
